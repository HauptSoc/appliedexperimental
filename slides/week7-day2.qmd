---
title: "Confidence Intervals -- Real Life Sampling Distributions"
format: 
  revealjs:
    theme: style.scss
editor: visual
---

```{r set-up}
library(tidyverse)
library(infer)
library(scales)
library(stringr)
library(palmerpenguins)
library(RColorBrewer)

options(scipen = 999)
```

## Course Updates

-   Statistical Critique 1 revisions are due tonight
-   Midterm Projects will be graded by Friday
-   Next week you will work on your second statistical critique

::: callout-caution
# Don't forget reflections!

If your reflections are not present by the deadline for revisions, your revisions **are not** eligible to be regraded. Please don't forget your reflections!
:::

# What if I only have one sample?

## 

::: {style="font-size: 2em; color: #000000;"}
Approximate the variability you'd expect to see in other samples!
:::

. . .

<center>

::: {style="font-size: 3em; color: #0F4C81;"}
**Bootstrapping!**
:::

## 

::: {style="font-size: 2em; color: #000000;"}
A Bootstrap Resample
:::

. . .

-   Assumes the original sample is "representative" of observations in the population.

. . .

-   Uses the original sample to generate new samples that might have occurred with additional sampling.

</br>

. . .

::: {style="font-size: 1em; color: #0F4C81;"}
We can use the statistics from these bootstrap resamples to approximate the true sampling distribution!
:::

# Why do we want a sampling distribution?

## 

::: {style="font-size: 2em; color: #000000;"}
Estimating a population parameter
:::

. . .

-   We are interested in knowing how a statistic varies from sample to sample.

. . .

-   Knowing a statistic's behavior helps us make better / more informed decisions!

. . .

-   This helps us estimate what values are more or less likely for the population parameter to have.

# Confidence Intervals

. . .

> Capture a range of plausible values for the population parameter.

. . .

</br>

> Are more likely to capture the population parameter than a *point estimate*.

## 

::: {style="font-size: 2em; color: #000000;"}
How do I get this plausible range of values?
:::

. . .

<center>

::: {style="font-size: 2em; color: #0F4C81;"}
Bootstrapping!
:::

. . .

1. From your original sample, resample with replacement the same number of times as your original sample.

. . .

<center>

::: {style="font-size: 1em; color: #0F4C81;"}
This is your bootstrap resample.
:::

</center>

. . .

2. Repeat this process many, many times.

. . .

3. Calculate a numerical summary (e.g., mean, median) for each bootstrap resample.

<center>

::: {style="font-size: 1em; color: #0F4C81;"}
These are your bootstrap statistics
:::

</center>

## 

::: {style="font-size: 2em; color: #000000;"}
Bootstrap Distribution
:::

. . .

> a distribution of the **bootstrap statistics** from every **bootstrap resample**

. . .

</br>

Displays the variability in the statistic that could have happened with repeated sampling.

. . .

::: {style="font-size: 1em; color: #0F4C81;"}
Approximates the true sampling distribution!
:::

# Penguins!

::: columns
::: {.column width="45%"}
![](images/adelie_penguin.jpg)
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
![](images/chinstrap_penguin.jpeg)
:::
:::

## Statistic: $\beta_1$

```{r bootstraps}
boot1 <- penguins %>%
  specify(response = bill_length_mm, 
          explanatory = body_mass_g) %>% 
  generate(reps = 500, type = "bootstrap") %>% 
  calculate(stat = "slope") 

boot1_CI <- get_confidence_interval(boot1, 
                                    level = 0.95, 
                                    type = "percentile") 
```

::: columns
::: {.column width="70%"}
```{r scatterplot}
#| message: false
#| echo: false
ggplot(data = penguins, 
       mapping = aes(y = bill_length_mm, x = body_mass_g)) + 
  geom_point() +
  geom_smooth(method = "lm") + 
  labs(y = "Bill Length (mm)",
       x = "Body Mass (g)") +
  theme_bw() + 
  theme(axis.title.x = element_text(size = 18), 
        axis.title.y = element_text(size = 18), 
        axis.text.x = element_text(size = 14), 
        axis.text.y = element_text(size = 14)
        )
```
:::

::: {.column width="5%"}
:::

::: {.column width="25%"}
The relationship between penguin's bill length and body mass for **all** penguins in the Palmer Archipelago
:::
:::


## In this sample of `r nrow(penguins)` penguins...

```{r}
penguin_lm <- lm(bill_length_mm ~ body_mass_g, data = penguins) %>% 
  broom::tidy()

intercept <- penguin_lm %>% 
  filter(term == "(Intercept)") %>% 
  select(estimate) 

slope <- penguin_lm %>% 
  filter(term == "body_mass_g") %>% 
  select(estimate)
```

$$\widehat{\text{bill length}} = `r round(intercept, digits = 3)` + `r round(slope, digits = 3)` \times \text{body mass}$$

. . .

</br>

::: {style="font-size: 1.5em;"}
What slope could have happened in a different sample of penguins?
:::

## 

::: {style="font-size: 2em; color: #000000;"}
Generating bootstrap resamples and calculating bootstrap statistics
:::

. . .

</br>

**Step 1:** `specify()` your response and explanatory variables

. . .

**Step 2:** `generate()` bootstrap resamples

. . .

**Step 3:** `calculate()` the statistic of interest

## 

::: {style="font-size: 2em; color: #000000;"}
Step 1: Specify your variables!
:::

![](images/specify_scatterplot.jpg)

```{r specify}
#| eval: false
#| echo: true
#| code-line-numbers: "|2,3"

penguins %>% 
  specify(response = bill_length_mm, 
          explanatory = body_mass_g)
```

## 

::: {style="font-size: 2em; color: #000000;"}
Step 2: Generate your resamples!
:::

```{r generate, echo = FALSE, eval = FALSE}
#| echo: true
#| eval: false
#| code-line-numbers: "|4"
penguins %>% 
  specify(response = bill_length_mm, 
          explanatory = body_mass_g) %>% 
  generate(reps = 500, type = "bootstrap")
```

</br>

. . .

`reps` -- the number of resamples you want to generate

</br>

`"bootstrap"` -- the method that should be used to generate the new samples

##  {background-color="#B6CADA"}

::: {style="font-size: 3em; color: #000000;"}
Your turn!
:::

. . .

</br>

Why do we resample *with replacement* when creating a bootstrap distribution?

</br>

When we resample with replacement from our original sample what are we assuming about our sample?

## 

::: {style="font-size: 2em; color: #000000;"}
Step 3: Calculate your statistics!
:::

```{r calculate}
#| echo: true
#| eval: false
#| code-line-numbers: "|6"
penguins %>% 
  specify(response = bill_length_mm, 
          explanatory = body_mass_g) %>% 
  generate(reps = 1000, 
           type = "bootstrap") %>% 
  calculate(stat = "slope")
```

</br>

. . .

`"slope"` -- the `stat`istic of interest

##  {background-color="#B6CADA"}

::: {style="font-size: 2em; color: #000000;"}
The final product
:::

::: {style="font-size: 0.85em;"}
```{r}
#| echo: true
#| code-line-numbers: false
#| eval: false
#| label: bootstrap-viz-code

visualize(boot1) + 
  labs(title = "Distribution of 1,000 Bootstrap Resamples", 
       x = "Slope Statistic", 
       y = "")
```
:::

```{r}
#| fig-align: center
#| label: bootstrap-viz
#| echo: false

visualize(boot1) + 
  labs(title = "Bootstrap Distribution of 1,000 reps", 
       x = "Slope Statistic") +
  theme(plot.title = element_text(size = 24), 
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16), 
        axis.text.x = element_text(size = 12), 
        axis.text.y = element_text(size = 12)
        )
```


## 

::: {style="font-size: 2em; color: #000000;"}
A plausible range of values for $\beta_1$
:::

::: {style="font-size: 0.75em;"}
```{r ci-viz}
#| echo: true
#| code-line-numbers: false
#| output-location: slide

visualise(boot1) +
  shade_confidence_interval(endpoints = boot1_CI, 
                            color = "red", 
                            fill = "pink") +  
  labs(title = "Distribution of 1,000 Bootstrap Resamples", 
       x = "Slope Statistic", 
       y = "")
```
:::

## 

::: {style="font-size: 2em; color: #000000;"}
The 95% confidence interval is...
:::

```{r ci}
#| eval: false
#| echo: true
#| code-line-numbers: false
get_confidence_interval(boot1, 
                        level = 0.95, 
                        type = "percentile")
```

</br>

```{r ci-table}
get_confidence_interval(boot1, 
                        level = 0.95, 
                        type = "percentile") %>% 
  mutate(lower_ci = round(lower_ci, 5), 
         upper_ci = round(upper_ci, 5)) %>% 
  knitr::kable(col.names = c("Lower Bound", "Upper Bound")) %>% 
  kableExtra::kable_styling()

```

. . .

</br>

**What do we hope is captured by this interval?**

## 

::: {style="font-size: 2em; color: #000000;"}
How do we interpret this interval?
:::

. . .

> "We are 95% confident the slope of the relationship between bill length and body mass for all penguins in the Palmer Archipelago is between 0.00355 and 0.00453

. . .

</br>

> "For every 1 gram increase in a penguin's body mass, we are 95% confident the length of the penguin's bill will increase between 0.00355 and 0.00453mm. 

. . .

</br>

**What does it mean to be 95% confident?**

##  {background-color="#B6CADA"}

::: {style="font-size: 2em; color: #000000;"}
Classic interpretation mistakes
:::

. . .

</br>

> "95% of the time the population parameter would fall between 0.00355 and 0.00453."

</br>

. . .

> "We are 95% confident the sample statistic is in our interval."

# Scaling to Multiple Linear Regression

## Incorporating Penguin Sex

```{r}
penguins %>% 
  drop_na(sex) %>% 
  ggplot(mapping = aes(x = body_mass_g, y = bill_length_mm, color = sex)) +
  geom_point() + 
  geom_smooth(method = "lm") +
  labs(x = "Bill Length (mm)", 
       y = "Body Mass (g)", 
       color = "Sex") +
  scale_color_brewer(palette = "Dark2")
```

## What changes?

The original sample of `r nrow(penguins)` penguins were broken down into the following groups: 

```{r}
penguins %>% 
  drop_na(sex) %>% 
  count(sex) %>% 
  knitr::kable(col.names = c("Sex", "Sample Size")) %>% 
  kableExtra::kable_styling()
```

. . .

Before we resampled with replacement `r nrow(penguins)` times. 

> If we use that same procedure, are we guaranteed to get 165 female penguins and 168 male penguins in each sample?

## Getting our Observed Statistic 

**Step 1: Fitting our Model**

::: {style="font-size: 0.75em;"}
```{r}
#| echo: true
#| code-line-numbers: "|2|3"

observed_fit <- penguins %>%
  specify(bill_length_mm ~ body_mass_g*sex) %>%
  fit()
```
:::

:::{.callout-tip}
# Syntax changes

When we have **multiple** explanatory variables, we need to use the "tilde" (`~`) syntax to specify our model. We also use the `fit()` function instead of the `calculate()` function. 
:::

## Getting our Observed Statistic 

**Step 2: Finding our Statistic**

```{r}
#| echo: false
#| code-line-numbers: false
observed_fit %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling()
```

::: {style="font-size: 1.5em; color: #ed8402;"}
What is our observed statistic for this investigation?
:::

## Generating Bootstrap Fits

::: {style="font-size: 0.75em;"}
```{r}
#| cache: true
#| echo: true
#| code-line-numbers: "|3"

bootstrap_fits <- penguins %>%
  specify(bill_length_mm ~ body_mass_g*sex) %>%
  generate(reps = 1000, type = "bootstrap") %>%
  fit()
```
:::

## Obtaining a Bootstrap Confidence Interval

::: {style="font-size: 0.75em;"}
```{r}
#| echo: true
#| code-line-numbers: "|2"

get_confidence_interval(bootstrap_fits,
                        point_estimate = observed_fit,
                        level = 0.90, 
                        type = "percentile")

```
:::

## How do we interpret this interval?

```{r}
get_confidence_interval(bootstrap_fits,
                        point_estimate = observed_fit,
                        level = 0.90, 
                        type = "percentile") %>% 
  filter(term == "body_mass_g:sexmale") %>% 
  select(lower_ci, upper_ci) %>% 
  knitr::kable(col.names = c("Lower Bound", "Upper Bound")) %>% 
  kableExtra::kable_styling()
```

. . .

> We are 90% confident that the for every 1 gram increase in a penguin's body mass, the length of a **male** penguin's bill is between 0.0000368 and 0.00191mm shorter than a **female** penguin's bill. 

## Incorporating Penguin Bill Length



