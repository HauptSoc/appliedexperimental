{
  "hash": "b9c908d162ee59c14026efd06b7b9a18",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1: Welcome to Quarto!\"\nauthor: \"Your Name Here!\"\nformat: html\neditor: visual\nembed-resources: true\nexecute: \n  echo: true\n  eval: false\n---\n\n\n\n# Quarto\n\nThis is a Quarto document!\n\nQuarto is a software that allows you to interweave text and R code to create HTML, PDF, and Microsoft Word documents\n\nThere are two ways to view a Quarto document, (1) as the \"Source\" file, or (2) as the \"Visual\" file. We will **only** use the Visual option in this class, as it allows you to interact with Quarto similar to how you interact with Word or Google Docs.\n\n## Formatting your Document\n\nSimilar to a Word Doc, there are a variety of ways you can spice up a Quarto document! Let's explore a few.\n\n**Question 1:** Using the formatting options, make a numbered list of your top three favorite animals.\n\n**Question 2:** Using the formatting options, insert an image of your favorite animal.\n\n**Question 3:** Now, change the \"Formatting your Document\" section name to \"My Favorite Animals\". Make sure your header is a level 1 -- use the Header 1 formatting option!\n\n## R Code\n\nYou can differentiate the R code within a Quarto file from the body of the document, based on the gray boxes that start with an `{r}.`\n\nHere is an example of an R code chunk:\n\n\n\n\n\n\n\nNotice in the line after the `{r}` there are two lines that start with `#|` â€“ this is the symbol that declares options for a code chunk. The `#| label:` allows us to specify a name for a code chunk, I typically choose a name that tells me what the code chunk does (e.g., load-packages, clean-data). The `#| include: false` option at the beginning of the code chunk controls how the code output looks in our final rendered document.\n\nThis code chunk has two things we want to pay attention to:\n\n1.  The `library(tidyverse)` code loads in an R package called the \"tidyverse\". This is code you will have in **every** lab assignment for this class!\n\n2.  Code comments which are denoted by a `#` symbol. Code comments are a way for you (and me) to write what the code is doing, without R thinking what we are writing is code it should execute.\n\n## Running Code\n\nIn order for us to be able to use the contents of the `tidyverse` package (e.g., data, functions), we need to run the code chunk above! There are a few ways to do this:\n\n1.  Clicking on the green \"play\" button in the upper right hand corner of the document. *This will run **all** the code included in the code chunk.*\n2.  Putting your cursor in the code chunk and using a keyboard shortcut to run the code. On a PC the shortcut is Control + Enter (pressed at the same time). On a Mac the shortcut is Command + Return. *This will run a **single** line of code, so you may need to do this multiple times is there is more than one line of code!*\n\n**Question 4:** Run the code in the above code chunk (`load-packages`) using either of these methods. What output do you see? What do you think this output is telling you?\n\n## Rendering a HTML Document\n\nWhen you click the **Render** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. Rendering a document is similar to running the code *within* the document, as Quarto performs the same action (running each chunk of code) in order to render your final document.\n\n**Question 5:** Click on the \"Render\" button to produce an HTML file (*you may need to enable popups to see the rendered document*). Do you see the above code chunk (`load-packages`) in the rendered HTML document? Why do you think this is the case?\n\n## Including Code Output\n\nYou can include code output in your rendered document:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg\n```\n:::\n\n\n\n**Question 6:** Run the code above to see a preview of the `mpg` dataset. What are the observations (cases) in these data?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpg)\n```\n:::\n\n\n\nWe can also preview a dataset using the `glimpse()` function.\n\n**Question 7:** Run the code above and compare the output to the previous code (`mpg`). How is the output different? Which output do you prefer?\n\n## Including Plots\n\nYou can also embed plots in the rendered document. Here is an example of a plot:\n\n\n\n::: {.cell}\n\n:::\n\n\n\n**Question 8**: What do you think the `echo: false` option does in the above code chunk? *Hint: Render the document and see what you see!*\n\n**Question 9:** What do you think the `mapping = aes(y = manufacturer, x = hwy))` code does?\n\n**Question 10:** What do you think the `labs(x = \"Highway Miles Per Gallon\", y = \"Car Manufacturer\")` code does?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}