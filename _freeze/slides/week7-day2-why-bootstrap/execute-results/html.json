{
  "hash": "76e14f1ea10d3128e3b9600bbe80a906",
  "result": {
    "markdown": "---\ntitle: \"Confidence Intervals -- Real Life Sampling Distributions\"\nformat: revealjs\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n::: {style=\"font-size: 4em; color: #000000;\"}\nWhat if I only have one sample?\n:::\n\n## \n\n::: {style=\"font-size: 2em; color: #000000;\"}\nApproximate the variability you'd expect to see in other samples!\n:::\n\n. . .\n\n<center>\n\n::: {style=\"font-size: 3em; color: #0F4C81;\"}\n**Bootstrapping!**\n:::\n\n## \n\n::: {style=\"font-size: 2em; color: #000000;\"}\nA Bootstrap Resample\n:::\n\n. . .\n\n-   Assumes the original sample is \"representative\" of observations in the population.\n\n. . .\n\n-   Uses the original sample to generate new samples that might have occurred with additional sampling.\n\n</br>\n\n. . .\n\n::: {style=\"font-size: 1em; color: #0F4C81;\"}\nWe can use the statistics from these bootstrap samples to approximate the true sampling distribution!\n:::\n\n##  {background-color=\"#B6CADA\"}\n\n::: {style=\"font-size: 5em; color: #000000;\"}\nWhy???\n:::\n\n## \n\n::: {style=\"font-size: 2em; color: #000000;\"}\nEstimating a population parameter\n:::\n\n. . .\n\n-   We are interested in knowing how a statistic varies from sample to sample.\n\n. . .\n\n-   Knowing a statistic's behavior helps us make better / more informed decisions!\n\n. . .\n\n-   This helps us estimate what values are more or less likely for the population parameter to have.\n\n##  {background-color=\"#B6CADA\"}\n\n::: {style=\"font-size: 2em; color: #000000;\"}\nConfidence Intervals\n:::\n\n. . .\n\n> Capture a range of plausible values for the population parameter.\n\n. . .\n\n</br>\n\n> Are more likely to capture the population parameter than a *point estimate*.\n",
    "supporting": [
      "week7-day2-why-bootstrap_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}