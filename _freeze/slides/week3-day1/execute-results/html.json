{
  "hash": "589915e4448b78d33915f04a98cc883c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Incorporating Categorical Variables\"\nformat: \n  revealjs:\n    logo: images/dplyr.png\n    theme: [simple, style.scss]\neditor: visual\nexecute: \n  echo: false\n---\n\n\n\n\n##  {background-color=\"#D4D4D4\"}\n\n<center>\n\n::: {style=\"margin-top: 100px; font-size: 3em; color: #000000;\"}\nHow would you describe a categorical variable?\n:::\n\n</center>\n\n## In `R`...\n\ncategorical variables can have either `character` *or* `factor` data types\n\n</br>\n\n. . .\n\n`factor` -- structured & fixed number of levels / options\n\n-   can be ordered or unordered\n\n</br>\n\n. . .\n\n`character` -- unstructured & variable number of levels\n\n-   is inherently unordered\n\n##  {background-color=\"#D4D4D4\"}\n\n::: {style=\"font-size: 1.25em;\"}\nFill in the associated data types (e.g. character, factor, integer, double) with each type of variable.\n:::\n\n| Variable                      | Data Type in R |\n|-------------------------------|----------------|\n| Categorical variable          |                |\n| Continuous numerical variable |                |\n| Discrete numerical variable   |                |\n\n## `dplyr` -- a tool bag for data wrangling\n\n::: columns\n::: {.column width=\"40%\"}\n![](images/dplyr.png)\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"55%\"}\n`filter()`\n\n`select()`\n\n`mutate()`\n\n`summarize()`\n\n`arrange()`\n\n`group_by()`\n:::\n:::\n\n##  {background-color=\"#D4D4D4\"}\n\n::: {style=\"font-size: 2em; color: #000000;\"}\nBrainstorm definitions for each verb\n:::\n\n::: columns\n::: {.column width=\"30%\"}\n`filter()`\n\n`select()`\n\n`mutate()`\n\n`group_by()`\n\n`summarize()`\n\n`arrange()`\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"65%\"}\n:::\n:::\n\n## \n\n::: columns\n::: {.column width=\"55\"}\n::: {style=\"font-size: 1.5em;\"}\nThe Pipe `%>%`\n:::\n:::\n\n::: {.column width=\"15%\"}\n:::\n\n::: {.column width=\"15%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/pipe.png){width=120}\n:::\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/not_a_pipe.jpg)\n:::\n:::\n\n:::\n:::\n\n<center>![](images/pipe_process.png)</center>\n\n## \n\n::: {style=\"margin-top: 100px; font-size: 2em;\"}\nIf you wanted means for each level of a categorical variable, what would you do?\n:::\n\n## Trout Size\n\n::: {style=\"font-size: 0.75em;\"}\nThe HJ Andrews Experimental Forest houses one of the larges long-term ecological research stations, specifically researching cutthroat trout and salamanders in clear cut or old growth sections of Mack Creek.\n:::\n\n::: small\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntrout %>% \n  group_by(section) %>% \n  summarize(\n    mean_length = mean(length_1_mm, \n                       na.rm = TRUE)\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 2\n  section                               mean_length\n  <chr>                                       <dbl>\n1 clear cut forest                             85.3\n2 upstream old growth coniferous forest        81.4\n```\n\n\n:::\n:::\n\n:::\n\n. . .\n\n</br>\n\n<center>\n\n::: {style=\"font-size: 0.75em;\"}\n**Why `na.rm = TRUE`?**\n:::\n\n</center>\n\n## Classifying Channel Types\n\n::: {style=\"font-size: 0.75em;\"}\nThe channels of the Mack Creek which were sampled were classified into the following groups:\n:::\n\n::: columns\n::: {.column width=\"15%\"}\n`\"C\"`\n\n`\"I\"`\n\n`\"IP\"`\n\n`\"P\"`\n\n`\"R\"`\n\n`\"S\"`\n\n`\"SC\"`\n\n`NA`\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"80%\"}\ncascade\n\nriffle\n\nisolated pool\n\npool\n\nrapid\n\nstep (small falls)\n\nside channel\n\nnot sampled by unit\n:::\n:::\n\n## `filter()`-ing Specific Channel Types\n\n::: {style=\"font-size: 0.9em;\"}\nThe majority of the Cutthroat trout were captured in cascades (C), pools (P), and side channels (SC). Suppose we want to only retain these levels of the `unittype` variable.\n:::\n\n. . .\n\n<center>**What would you do?**</center>\n\n. . .\n\n</br>\n\n::: small\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntrout %>% \n  filter(\n    unittype %in% c(\"C\", \"P\", \"SC\")\n         )\n```\n:::\n\n:::\n\n. . .\n\n</br>\n\n<center>**Why use `%in%` instead of `==`?**</center>\n\n## Incorporating Categorical Variables into Data Visualizations\n\n::: incremental\n-   As a variable on the `x`- or `y`-axis\n\n-   As a `color` / `fill`\n\n-   As a facet\n:::\n\n## Salamander Size\n\n::: columns\n::: {.column width=\"70%\"}\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = salamander, \n       mapping = aes(x = length_2_mm)) + \n  geom_histogram(binwidth = 14) + \n  labs(x = \"Snout to Tail Length (mm)\")\n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/histogram-of-salamander-lengths-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"25%\"}\n::: small\n::: fragment\nHow would this histogram look if there was no variation in salamander length?\n\n</br>\n:::\n\n::: fragment\nWhat are possible causes for the variation in salamander length?\n:::\n:::\n:::\n:::\n\n## Faceted Histograms\n\n::: small\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nggplot(data = salamander, \n       mapping = aes(x = length_2_mm)) + \n  geom_histogram(binwidth = 14) + \n  facet_wrap(~ section, scales = \"free\") +\n  labs(x = \"Snout to Tail Length (mm)\")\n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/faceted-histograms-of-salamander-length-1.png){width=85%}\n:::\n:::\n\n:::\n\n## Side-by-Side Boxplots\n\n::: columns\n::: {.column width=\"50\"}\n::: small\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = salamander, \n       mapping = aes(x = length_1_mm, \n                     y = species)\n         ) + \n  geom_boxplot() + \n  labs(x = \"Snout to Tail Length (mm)\", \n       y = \"\") \n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/horizontal-boxplot-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::\n\n::: {.column width=\"50\"}\n::: small\n::: fragment\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = salamander, \n       mapping = aes(y = length_1_mm, \n                     x = species)\n         ) + \n  geom_boxplot() + \n  labs(y = \"Snout to Tail Length (mm)\", \n       x = \"\")\n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/vertical-boxplot-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::\n:::\n:::\n\n## Colors in Boxplots\n\n::: small\n\n::: {.cell layout-align=\"center\" output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = salamander, \n       mapping = aes(x = length_1_mm, \n                       y = species, \n                       color = unittype)\n         ) + \n  geom_boxplot() + \n  labs(x = \"Snout to Tail Length (mm)\", \n       y = \"\", \n       color = \"Channel Type\")\n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/boxplot-color-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n\n## Facets & Colors in Boxplots\n\n::: small\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = salamander, \n       mapping = aes(x = length_1_mm, \n                       y = species, \n                       color = section)\n         ) + \n  geom_boxplot() + \n  facet_wrap(~ unittype) + \n  labs(x = \"Snout to Tail Length (mm)\", \n       y = \"\", \n       color = \"Section in Mack Creek\")\n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/boxplot-facets-1.png){fig-align='center' width=960}\n:::\n:::\n\n:::\n\n## Facets & Color in Scatterplots\n\n::: small\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nggplot(data = salamander, \n       mapping = aes(x = length_1_mm, \n                       y = weight_g, \n                       color = section)\n         ) + \n  geom_point(alpha = 0.25) + \n  facet_wrap(~species) +\n  labs(y = \"Snout to Tail Length (mm)\", \n       x = \"Weight (g)\", \n       color = \"Section in Mack Creek\")\n```\n\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/scatterplot-facets-1.png){fig-align='center' width=960}\n:::\n:::\n\n:::\n\n## Your Turn -- 90 seconds\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](week3-day1_files/figure-revealjs/aesthetic-activity-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n. . .\n\nWhat are the aesthetics included in this plot?\n\n. . .\n\nWhat is one aspect of this plot that you believe is well done? What is one aspect of the plot that could be improved?\n\n# [Statistical Critique](../critique/critique-1.qmd)\n\n## Your Tasks\n\n1.  Find your visualizations\n\n-   Visualization from your Week 1 article (Statistics in Your Field)\n-   Visualization from the [New York Times](https://www.nytimes.com/column/whats-going-on-in-this-graph)\n\n2.  Discuss the `aes`thetics included in the plots\n3.  Discuss what you believe the plot does well\n4.  Discuss what improvements could be made to make the plot more clear\n",
    "supporting": [
      "week3-day1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}