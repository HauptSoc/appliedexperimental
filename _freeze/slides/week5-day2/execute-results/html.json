{
  "hash": "42ec64a0ccb28bf03f396bd745175f13",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Midterm Project Work Day\"\nformat: \n  revealjs:\n    theme: style.scss\neditor: source\n---\n\n\n\n# Reminders About Deadlines\n\n## Revision Deadlines\n\n-   Lab 3 Revisions are due next Wednesday (May 7)\n\n-   Statistical Critique revisions are due next Wednesday (May 7)\n\n-   The first draft of your Midterm Project is due on [Sunday at midnight]{.underline}.\n\n. . .\n\n::: callout-caution\n# Deadline Extension\n\nA deadline extension [**is**]{.underline} permitted for the first draft.\nDeadline extensions [**are not**]{.underline} permitted for the final version\n(due next week).\n:::\n\n# Comments from Project Proposals\n\n## Introduction Versus Methods\n\n-   The description of your data goes in your Introduction.\n\n-   The description of your variables goes at the beginning of your Methods, in \nthe Variables subsection!\n\n## Data Description -- A Word of Caution\n\nBe cautious in how you are using the resources I provided---do not copy these\ndescriptions.\n\nInserting a verbatim copy of the descriptions seen in the data resources is\n[**plagiarism**]{.underline}.\n\n::: callout-caution\n# In text citation\n\nIf you wish to borrow elements of these descriptions, you need to quote them and\nprovide a reference to the resource. e.g., \"This data set has been of interest \nto medical researchers who are studying the relation between habits and\npractices of expectant mothers and the birth of their children\" (United States\nDepartment of Health and Human Services, 2014).\n:::\n\n## Variable Selection\n\nBe sure to review the feedback provided in your Midterm Project Proposal \n**before** starting your first draft. \n\nSpecifically, make sure I did not have any objections to the variables you chose\nfor your analysis!\n\n## Specific Dataset Advice\n\n-   For the `and_vertebrates` data, you should include `species` as an \nexplanatory variable. If you don't you are assuming the same relationship \napplies to trout AND salamanders.\n\n-   For the `hbr_maples` data, you cannot use `year` as a numerical variable. \nThere are only two years of data!\n    * If you want to use `year` as a categorical variable, let Dr. T know and\n    they will help you write code to change the data type of this variable!\n\n# Coding a Multiple Linear Regression\n\n## Step 0 -- Read in Your Data\n\n::: {.midi}\n-   Locate what package your data live in (found in the directions for the midterm project proposal)\n\n-   Load in the package you need!\n\n-   Get started!\n:::\n\n. . .\n\n::: {.midi}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(openintro)\n```\n:::\n\n\n\n**OR**\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(lterdatasampler)\n```\n:::\n\n\n:::\n\n. . .\n\n::: {.midi}\n::: callout-caution\n# moderndive Package\n\nWe will be using the **moderndive** package to get our regression tables, so **do not** remove this package from your project!\n:::\n:::\n\n## Step 1 -- Visualizations\n\nYou will make **two** total visualizations: \n\n::: {.midi}\n1.  A \"different slopes\" multiple linear regression using `geom_smooth(method = \"lm\")`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\nggplot(data = MA_schools, \n       mapping = aes(y = average_sat_math, \n                       x = perc_disadvan, \n                       color = size)) + \n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  labs(x = \"Percent Economically Disadvantaged\", \n       y = \"Average SAT Math\", \n       color = \"Size of School\") \n```\n:::\n\n\n:::\n\n## Step 1 -- Visualizations\n\n::: {.midi}\n2.  A \"parallel slopes\" multiple linear regression using `geom_parallel_slopes()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\nggplot(data = MA_schools, \n       mapping = aes(y = average_sat_math, \n                       x = perc_disadvan, \n                       color = size)) + \n  geom_point() +\n  geom_parallel_slopes(method = \"lm\") + \n  labs(x = \"Percent Economically Disadvantaged\", \n       y = \"Average SAT Math\", \n       color = \"Size of School\") \n```\n:::\n\n\n:::\n\n## Step 2 -- Decide the \"Best\" Model\n\n::: {.midi}\nNext, you will decide which of these two models seems like the better model. \n:::\n\n::: {.small}\n::: {.incremental}\n-   Look at the plot where the lines are allowed to be different! Does it look\nlike they are?\n\n-   If the lines look different -- you should use the different slopes\n(interaction) model!\n\n-   If the lines look similar -- you should use the parallel slopes (additive)\nmodel!\n:::\n:::\n\n. . .\n\n::: {.midi}\n::: {.callout-important}\n# No p-values\n\nYour model decision needs to rely **exclusively** on the visualizations, you \ncannot use p-values to make your decision. \n:::\n:::\n\n## Step 3 -- Fit the regression model you chose with `lm()`\n\n</br>\n\n::: {.midi}\nAre the slopes different? You need to fit a different slopes model! Use a \n`*` to separate the variables!\n:::\n\n::: small\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmy_model <- lm(tail_l ~ age * pop, data = possum)\n```\n:::\n\n\n:::\n\n. . .\n\n</br>\n\n::: {.midi}\nAre the slopes similar? You need to fit a parallel slopes model! Use a\n`+` to separate the variables!\n:::\n\n::: small\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmy_model <- lm(weight ~ weeks + habit, data = births14)\n```\n:::\n\n\n:::\n\n## Step 4: Get the coefficients with `get_regression_table()`\n\n</br>\n\nRegardless of the model you fit, you need to get your estimated coefficients\nusing the `get_regression_table()` function!\n\n</br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nget_regression_table(my_model)\n```\n:::\n\n\n\n\n##  {background-color=\"#D4D4D4\"}\n\n::: {style=\"font-size: 5em; color: #000000;\"}\nNow interpret!\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}